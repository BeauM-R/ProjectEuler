

public class Problem_8 {

    public static String theNumber =
            "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";


    static class highest {
        long product = -1;
        String consec = "";
    }




    public static void main(String[] args) {

        System.out.println(new Problem_8().run());

        int consecLength = 13;
        int searchLength = 1001 - consecLength;
        //System.out.println(theNumber.length());
        highest currentHighest = new highest();
        long testNumbers = 0;
        int[] consecutive = new int[consecLength];

        for (int x = 0; x < searchLength; x++) {

            testNumbers = 1;
            for (int i = 0; i < consecLength; i++) {
                //System.out.println(theNumber.charAt(x+i));
                consecutive[i] = Character.getNumericValue(theNumber.charAt((x + i)));
                testNumbers = testNumbers * Character.getNumericValue(theNumber.charAt((x + i)));
            }

            if (currentHighest.product <= testNumbers) {
                currentHighest.product = testNumbers;
                currentHighest.consec = theNumber.substring(x, x+consecLength);
            }

            System.out.println(theNumber.substring(x, x+consecLength) + " " + testNumbers);
        }
        System.out.println();
        System.out.println(currentHighest.product + " is a product of " + currentHighest.consec);
        System.out.println(currentHighest.consec.length());


    }


    public String run() {
        long maxProd = -1;
        String max = "";
        for (int i = 0; i + ADJACENT <= NUMBER.length(); i++) {
            long prod = 1;
            for (int j = 0; j < ADJACENT; j++)
                prod *= NUMBER.charAt(i + j) - '0';
            if (prod > maxProd) {
                maxProd = prod;
                max = NUMBER.substring(i, i+ADJACENT);
            }
            maxProd = Math.max(prod, maxProd);
        }
        System.out.println(max);
        return Long.toString(maxProd);
    }


    private static final int ADJACENT = 13;

    private static final String NUMBER = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";











}
